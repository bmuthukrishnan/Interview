1. how to make read only array list - Collections. unmodifiablelist
1.1 - bubble sort, fibonaci
2. End point in RESTful appi
3. difference between fecth and pull in git -  
	Fetch will get the updated details only
	Pull will get the full resource from repositary
4. reduse - elastice ***
5. Spring boot design paterns
6. SOLID principal
	Single Responsibility Principle (SRP) - A class should have one and only one reason to change, meaning that a class should have only one job.
	Open-Closed Principle (OCP) - Objects or entities should be open for extension but closed for modification.
	Liskov Substitution Principle (LSP) -  This means that every subclass or derived class should be substitutable for their base or parent class.
	Interface Segregation Principle (ISP) - never forced to implement an interface that it doesn’t use, shouldn’t be forced to depend on methods they do not use.
	Dependency Inversion Principle (DIP) - Entities must depend on abstractions, not on concretions. It states that the high-level module must not depend on the low-level module, but they should depend on abstractions.
7. Functional interfaces in java 8 - Predicate, consumer, suplier
8. swagger - documentation API. Interface decsription language for describing REST API 
10. Spring security implimentation in java spring boot
11. Final arraylist - can add data in the list and can able to modify the data in the list. cannot assign to another list.
12. when ConcurrentModificationException exception java occured - modify the collection when some thread is iterating over it. 
	during that time ConcurrentModificationException will occure
13. why function interface dont accept more than one abstract method- because it is used in lambda expression.
15. difference between meta space and primgen memory - meta space is introduced in java 8

17. Issues faces in previous projects **************
	Define requirement clearly. some un nexpected changes received after requirement discussion. last minit changes
	Integrating third-party or other custom applications (NetSuite)
	adiquate testting is required before deployment.
	
18. challenges faced in previous project  ***********
	system security is one of the challenge. it is the responsibility of all stake holder not only software engineere.
	addopting new technologies is one of the challenges
	time limitation
	Data preparation 
	Unclear of requirements
	
Spring mvc ->
		Request -> 
			DispatcherServlet ->
						-> HandlerMapping
						-> Controller <-> Model and View
						-> ViewResolver
						-> View
Spring Batch
Job Scheduler -> Job Launcher -> Job -> steps 
										-> ItemReader
										-> ItemProcesser
										-> ItemWriter
Launcher - > Configuring class -> (FeedFile Generation)
								Reader - from data base base on mapping
								Processor - Processing the data and manupulate and update if required
								Writer - Write the date in to database
Spring boot
@SpringBootApplication - > @Configuration, @EnableAutoConfiguration, and @ComponentScan

What Is The Best Practice Configuration Usage For Files - Pom.xml Or Settings.xml ?

Memory management 
Memory Leak, Reference type - 
	Strong Reference - same like usual object creation
	Soft Reference - It will clear the reference when next cycle of garbage collection
	Weak Reference - gorbage collection wil happens, If there is not strong reference to it.
	Phanthom reference - It is pushing into reference queue. So that allsuch reference are cleared.
Make session timeout with less time.
Too many string concatination
Use preparedstatement instead of statement for database operations.

https://github.com/Java-Hub18/Online_Grocery_Store/tree/master/General_Stores